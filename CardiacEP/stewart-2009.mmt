[[model]]
name: Stewart-2009
author: Michael clerx
desc: """
    Stewart-2009 model, adapted from CellML.

    The original cellml meta data follows below.

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Penny Noble
    DPAG, University of Oxford

    Model Status
    - - - - - - -
    This CellML ersion of the model has been checked in COR and OpenCell. The
    units are consistent and the model runs to recreate the published results.

    Model Structure
    - - - - - - - -
    In the paper described here, Philip Stewart and colleagues present a
    details of their newly developed model for the human Purkinje cell
    including validation against experimental data. Ionic mechanisms underlying
    the heterogeneity between the Purkinje fibre and ventricular action
    potentials in humans and other species were analysed. The newly developed
    Purkinje fibre cell model adds a new member to the family of human cardiac
    cell models developed previously for the sino-atrial node, atrial and
    ventricular cells, which can be incorporated into an anatomical model of
    human heart with details of its electrophysiological heterogeneity and
    anatomical complexity.

    The original paper reference is cited below:
    - - - - - - - - - - - - - - - - - - - - - - -
    Mathematical model of the electrical action potential of Purkinje fibre
    cells
    Philip Stewart, Oleg V. Aslanidi, Denis Noble, Penelope J. Noble, Mark R.
    Boyett, and Henggui Zhang, 2009
    Philosophical Transactions of the Royal Society, 367, 2225-2255.
    PubMed ID: 19414454
    """
membrane.V      = -69.1370441636
calcium.Ca_i    = 0.000101878186157
calcium.Ca_SR   = 3.10836886659
calcium.Ca_ss   = 0.000446818714055
calcium.R_prime = 0.991580051908
sodium.Na_i     = 8.80420286532
potassium.K_i   = 136.78189416
if.y            = 0.0457562667987
ikr.Xr1         = 0.00550281999719
ikr.Xr2         = 0.313213286438
iks.Xs          = 0.00953708522975
ina.m           = 0.0417391656295
ina.h           = 0.190678733735
ina.j           = 0.238219836154
ical.d          = 0.000287906256206
ical.f          = 0.989328560288
ical.f2         = 0.995474890442
ical.fCass      = 0.999955429598
ito.s           = 0.963861017995
ito.r           = 0.00103618091197

#
# Engine
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
dot(V) = - (i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = sodium.INa_tot + potassium.IK_tot + calcium.ICa_tot
    desc: Ionic current out of the cell
i_stim = engine.pace * amplitude
    desc: """
        Stimulus current, also defined outward (so to excite the cell, you
        need a negative stimulus."""
    amplitude = -30
i_diff = 0 bind diffusion_current
    desc: Current to neighbouring cells, defined outward.

#
# Physical constants
#
[phys]
R = 8314.472 [J/mol/K]
T = 310 [K]
F = 96485.3415 [C/mmol]
RTF = R * T / F
FRT = F / R / T
FFRT = F * FRT
Cm = 0.185 [uF]
V_c = 0.016404 [um^3]

#
# (a) Inwared rectifier current, IK1
# Appendix page 2242
#
[ik]
use membrane.V
i_K1 = g_K1 * xK1_inf * (V - 8 - nernst.E_K)
    in [uA/uF]
g_K1 = 0.065 [1/ms]
xK1_inf = 1 / (1 + exp(0.1 * (V + 75.44)))

#
# (b) Transient outward current, ITo
# Appendix page 2242
#
[ito]
use membrane.V
i_to = g_to * r * s * (V - nernst.E_K)
    in [uA/uF]
g_to = 0.08184 [1/ms]
dot(s) = (s_inf - s) / tau_s
    s_inf = 1 / (1 + exp((V + 27) / 13))
    tau_s = 85 * exp(-(V + 25) ^ 2 / 320) + 5 / (1 + exp((V - 40) / 5)) + 42
dot(r) = (r_inf - r) / tau_r
    r_inf = 1 / (1 + exp((20 - V) / 13))
    tau_r = 10.45 * exp(-(V + 40) ^ 2 / 1800) + 7.3

#
# (c) Sustained current, Isus
# Appendix page 2243
#
[isus]
use membrane.V
i_sus = g_sus * a * (V - nernst.E_K)
    in [uA/uF]
g_sus = 0.0227 [1/ms]
a = 1 / (1 + exp((5 - V) / 17))

#
# (d) Hyperpolarization-activated current, If
# Appendix page 2243
# Described in detail on page 2229
#
[if]
use membrane.V
i_f_Na = y * g_f_Na * (V - nernst.E_Na)
    in [uA/uF]
    g_f_Na = 0.0145654 [1/ms]
i_f_K = y * g_f_K * (V - nernst.E_K)
    in [uA/uF]
    g_f_K = 0.0234346 [1/ms]
dot(y) = (y_inf - y) / tau_y
    y_inf = 1 / (1 + exp((V + 80.6) / 6.8))
    tau_y = 4000 / (alpha_y + beta_y)
        in [ms]
    alpha_y = 1 * exp(-2.9 - 0.04 * V)
        in [1/ms]
    beta_y = 1 * exp(3.6 + 0.11 * V)
        in [1/ms]

#
# (e) Fast sodium current, INa
# Appendix page 2243
#
[ina]
use membrane.V
g_Na = 130.5744 [1/ms]
i_Na = g_Na * m ^ 3 * h * j * (V - nernst.E_Na)
    in [uA/uF]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-56.86 - V) / 9.03)) ^ 2
    alpha = 1 / (1 + exp((-60 - V) / 5))
    beta = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
    tau = alpha * beta
dot(h) = (inf - h) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40, 0.057 * exp(-(V + 80) / 6.8), 0)
    beta = if(V < -40,
        2.7 * exp(0.079 * V) + 310000 * exp(0.3485 * V),
        0.77 / (0.13 * (1 + exp((V + 10.66) / -11.1))))
dot(j) = (inf - j) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40,
        (-25428 * exp(0.2444 * V) - 6.948e-6 * exp(-0.04391 * V)) * (V + 37.78) / (1 + exp(0.311 * (V + 79.23))),
        0)
    beta = if(
        V < -40, 0.02424 * exp(-0.01052 * V) / (1 + exp(-0.1378 * (V + 40.14))),
        0.6 * exp(0.057 * V) / (1 + exp(-0.1 * (V + 32))))

#
# (f) L-type calcium current, ICaL
# Appendix page 2244
#
[ical]
use membrane.V
use phys.FFRT, phys.FRT
use nernst.Ca_o
i_CaL = if(abs(V - 15) < 1e-6, a * (b - Ca_o) / (2 * FRT), numer / denom)
    numer = a * (V - 15) * (b * exp((V - 15) * 2 * FRT) - Ca_o)
    denom = (exp(2 * (V - 15) * FRT) - 1)
    a = g_CaL * d * f * f2 * fCass * 4 * FFRT
    b = 0.25 * calcium.Ca_ss
    in [uA/uF]
g_CaL = 3.98e-5 [cm/ms/uF]
dot(d) = (d_inf - d) / tau_d
    d_inf = 1 / (1 + exp((-8 - V) / 7.5))
    tau_d = 1 * alpha_d * beta_d + gamma_d
    alpha_d = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    beta_d = 1.4 / (1 + exp((V + 5) / 5))
    gamma_d = 1 / (1 + exp((50 - V) / 20))
dot(f) = (f_inf - f) / tau_f
    f_inf = 1 / (1 + exp((V + 20) / 7))
    tau_f = 1102.5 * exp(-(V + 27) ^ 2 / 225) + 200 / (1 + exp((13 - V) / 10)) + 180 / (1 + exp((V + 30) / 10)) + 20
dot(f2) = (f2_inf - f2) / tau_f2
    f2_inf = 0.67 / (1 + exp((V + 35) / 7)) + 0.33
    tau_f2 = 562 * exp(-(V + 27) ^ 2 / 240) + 31 / (1 + exp((25 - V) / 10)) + 80 / (1 + exp((V + 30) / 10))
dot(fCass) = (fCass_inf - fCass) / tau_fCass
    fCass_inf = 0.6 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 0.4
    tau_fCass = 80 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 2
    in [ms]

#
# (g) Slow delayed rectifier current, IKs
# Appendix page 2245
# Also called the "slow time-dependent potassium current"
#
[iks]
use membrane.V
i_Ks = g_Ks * Xs ^ 2 * (V - nernst.E_Ks)
    in [uA/uF]
g_Ks = 0.2352 [1/ms]
dot(Xs) = (xs_inf - Xs) / tau_xs
    xs_inf = 1 / (1 + exp((-5 - V) / 14))
    tau_xs = 1 * alpha_xs * beta_xs + 80
    alpha_xs = 1400 / sqrt(1 + exp((5 - V) / 6))
    beta_xs = 1 / (1 + exp((V - 35) / 15))

#
# (h) Rapid delayed rectifier current, IKr
# Appendix page 2246
# Also called the "rapid time-dependent potassium current"
#
[ikr]
use membrane.V
i_Kr = g_Kr * sqrt(nernst.K_o / 5.4) * Xr1 * Xr2 * (V - nernst.E_K)
    in [uA/uF]
    g_Kr = 0.0918 [1/ms]
dot(Xr1) = (xr1_inf - Xr1) / tau_xr1
    xr1_inf = 1 / (1 + exp((-26 - V) / 7))
    tau_xr1 = 1 * alpha_xr1 * beta_xr1
    alpha_xr1 = 450 / (1 + exp((-45 - V) / 10))
    beta_xr1 = 6 / (1 + exp((V + 30) / 11.5))
dot(Xr2) = (xr2_inf - Xr2) / tau_xr2
    xr2_inf = 1 / (1 + exp((V + 88) / 24))
    tau_xr2 = 1 * alpha_xr2 * beta_xr2
    alpha_xr2 = 3 / (1 + exp((-60 - V) / 20))
    beta_xr2 = 1.12 / (1 + exp((V - 60) / 20))

#
# (i) Na/Ca exchange current, INaCa
# Appendix page 2246
#
[inaca]
use membrane.V
use sodium.Na_i, nernst.Na_o, calcium.Ca_i, nernst.Ca_o
i_NaCa = K_NaCa * (exp(g * vfrt) * Na_i^3 * Ca_o - exp((g - 1) * vfrt) * nao3 * Ca_i * alpha) / (
         km * (1 + K_sat * exp((g - 1) * V * phys.FRT)))
    in [uA/uF]
    vfrt = V * phys.FRT
    g = 0.35
    nao3 = Na_o^3
    km = (Na_o^3 + Km_Nai^3) * (Km_Ca + Ca_o)
    K_NaCa = 1000 [uA/uF]
    K_sat = 0.1
    alpha = 2.5
    Km_Ca = 1.38 [mmol/L]
    Km_Nai = 87.5 [mmol/L]

#
# (j) Na/K pump current, INaK
# Appendix page 2247
#
[inak]
use membrane.V
use nernst.K_o, sodium.Na_i
i_NaK = P_NaK * K_o / (K_o + K_mk) * Na_i / (Na_i + K_mNa) / (1 + 0.1245 * exp(-0.1 * vfrt) + 0.0353 * exp(-vfrt))
    in [uA/uF]
    vfrt = V * phys.FRT
P_NaK = 2.724 [uA/uF]
K_mk = 1 [mmol/L]
K_mNa = 40 [mmol/L]

#
# (j) Calcium pump current, IpCa
# Appendix page 2247
#
[ipca]
i_p_Ca = g_pCa * calcium.Ca_i / (calcium.Ca_i + K_pCa)
    in [uA/uF]
g_pCa = 0.1238 [uA/uF]
K_pCa = 0.0005 [mmol/L]

#
# (j) Potassium pump current, IpK
# Appendix page 2247
#
[ipk]
use membrane.V
i_p_K = g_pK * (V - nernst.E_K) / (1 + exp((25 - V) / 5.98))
    in [uA/uF]
g_pK = 0.0146 [1/ms]

#
# (k) Sodium background current, IbNa
# Appendix page 2247
#
[ibna]
use membrane.V
i_b_Na = g_bna * (V - nernst.E_Na)
    in [uA/uF]
g_bna = 0.00029 [1/ms]

#
# (k) Calcium background current, IbCa
# Appendix page 2247
#
[ibca]
use membrane.V
i_b_Ca = g_bca * (V - nernst.E_Ca)
    in [uA/uF]
g_bca = 0.000592 [1/ms]

#
# (l) Calcium dynamics
# Appendix page 2247
#
[calcium]
use membrane.V
ICa_cyt = ibca.i_b_Ca + ipca.i_p_Ca - 2 * inaca.i_NaCa
ICa_tot = ICa_cyt + ical.i_CaL
dot(Ca_i) = Ca_i_bufc * ((i_leak - i_up) * V_sr / phys.V_c + i_xfer - ICa_cyt * phys.Cm / (2 * phys.V_c * phys.F))
    in [mmol/L]
dot(Ca_SR) = Ca_sr_bufsr * (i_up - (i_rel + i_leak))
    in [mmol/L]
dot(Ca_ss) = Ca_ss_bufss * (-1 * ical.i_CaL * phys.Cm / (2 * 1 * V_ss * phys.F) + i_rel * V_sr / V_ss - i_xfer * phys.V_c / V_ss)
    in [mmol/L]
i_rel = V_rel * O * (Ca_SR - Ca_ss)
    in [mmol/L/ms]
i_up = Vmax_up / (1 + K_up ^ 2 / Ca_i ^ 2)
    in [mmol/L/ms]
i_leak = V_leak * (Ca_SR - Ca_i)
    in [mmol/L/ms]
i_xfer = V_xfer * (Ca_ss - Ca_i)
    in [mmol/L/ms]
O = k1 * Ca_ss ^ 2 * R_prime / (k3 + k1 * Ca_ss ^ 2)
dot(R_prime) = -k2 * Ca_ss * R_prime + k4 * (1 - R_prime)
k1 = k1_prime / kcasr
    in [m^6/s/mol^2 (1000.0)]
k2 = k2_prime * kcasr
    in [m^3/s/mol (1000.0)]
k1_prime = 0.15
    in [m^6/s/mol^2 (1000.0)]
k2_prime = 0.045
    in [m^3/s/mol (1000.0)]
k3 = 0.06 [1/ms]
k4 = 0.005 [1/ms]
EC = 1.5 [mmol/L]
max_sr = 2.5
min_sr = 1
kcasr = max_sr - (max_sr - min_sr) / (1 + (EC / Ca_SR) ^ 2)
V_rel = 0.102 [1/ms]
V_xfer = 0.0038 [1/ms]
K_up = 0.00025 [mmol/L]
V_leak = 0.00036 [1/ms]
Vmax_up = 0.006375 [mmol/L/ms]
Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (Ca_i + K_buf_c) ^ 2)
Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_SR + K_buf_sr) ^ 2)
Ca_ss_bufss = 1 / (1 + Buf_ss * K_buf_ss / (Ca_ss + K_buf_ss) ^ 2)
Buf_c = 0.2 [mmol/L]
K_buf_c = 0.001 [mmol/L]
Buf_sr = 10 [mmol/L]
K_buf_sr = 0.3 [mmol/L]
Buf_ss = 0.4 [mmol/L]
K_buf_ss = 0.00025 [mmol/L]
V_sr = 0.001094 [um^3]
V_ss = 5.468e-5 [um^3]

#
# (m) Sodium dynamics
# Appendix page 2248
#
[sodium]
INa_tot = ina.i_Na + ibna.i_b_Na + if.i_f_Na + 3 * inak.i_NaK + 3 * inaca.i_NaCa
dot(Na_i) = -INa_tot / (phys.V_c * phys.F) * phys.Cm
    in [mmol/L]

#
# (m) Potassium dynamics
# Appendix page 2248
#
[potassium]
IK_tot = ik.i_K1 + ito.i_to + if.i_f_K + isus.i_sus + ikr.i_Kr + iks.i_Ks + ipk.i_p_K - 2 * inak.i_NaK
dot(K_i) = -IK_tot / (phys.V_c * phys.F) * phys.Cm  # phys.Cm is not in the appendix!
    in [mmol/L]

#
# Reversal potentials
#
[nernst]
use potassium.K_i
use sodium.Na_i
use calcium.Ca_i
K_o = 5.4 [mmol/L]
E_K = phys.RTF * log(K_o / K_i)
    in [mV]
E_Ks = phys.RTF * log((K_o + P_kna * Na_o) / (K_i + P_kna * Na_i))
    in [mV]
P_kna = 0.03
Na_o = 140 [mmol/L]
E_Na = phys.RTF * log(Na_o / Na_i)
    in [mV]
Ca_o = 2 [mmol/L]
E_Ca = 0.5 * phys.RTF * log(Ca_o / Ca_i)
    in [mV]

[[script]]
import matplotlib.pyplot as plt
import myokit

#
# This example file shows two spontaneous depolarizations in the 2009 model by
# Stewart et al.
#

# Get simulation from magic method
m = get_model()
s = myokit.Simulation(m)

# Run simulation
d = s.run(2000)

# Display the result
plt.plot(d['engine.time'], d['membrane.V'])
plt.title('Membrane potential [mV]')
plt.show()

